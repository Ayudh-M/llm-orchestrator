cat > run_gpu.job <<'BASH'
#!/bin/bash
#SBATCH --job-name=consensus-mock
#SBATCH --partition=gpu_h100          # or gpu_a100; CPU-only: rome/genoa + remove --gpus
#SBATCH --nodes=1
#SBATCH --gpus=1
#SBATCH --cpus-per-task=8
#SBATCH --time=00:10:00
#SBATCH --mem=24G
#SBATCH --output=logs/%x-%j.out

set -euo pipefail

# Positional args: $1 TASK, $2 STRATEGY, $3 AGENT_A, $4 AGENT_B, $5 ROLESET, $6 ANSWER
TASK="${1:-2+2}"
STRATEGY="${2:-S1}"
AGENTA="${3:-mock_rule}"
AGENTB="${4:-mock_echo}"
ROLESET="${5:-rolesets/sql_author_auditor.json}"
ANSWER="${6:-42}"

module purge
module load 2024
module load Python/3.12.3-GCCcore-13.3.0

# venv for 3.12
source ~/.venvs/consensus312/bin/activate

# Robust HF cache (works even if $SCRATCH is unset)
if [ -n "${HF_HOME:-}" ]; then
  export HF_HOME="$HF_HOME"
elif [ -n "${SCRATCH:-}" ]; then
  export HF_HOME="$SCRATCH/hf_cache"
else
  export HF_HOME="$HOME/.cache/huggingface"
fi

mkdir -p "$HF_HOME" runs logs

# MOCK run (writes per-run JSON + appends to runs/diagnostics.csv)
srun python -m src.main --mock \
  --task "$TASK" \
  --answer "$ANSWER" \
  --strategy "$STRATEGY" \
  --roleset "$ROLESET" \
  --agent-a "$AGENTA" \
  --agent-b "$AGENTB" \
  --max-rounds 12
BASH

chmod +x run_gpu.job
bash -n run_gpu.job      # quick syntax check (no output = OK)
